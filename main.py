from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor
from aiogram.types import ReplyKeyboardRemove
from geopy.geocoders import Nominatim

import database
import buttons
import states
import config

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
bot = Bot(config.BOT_TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
geolocator = Nominatim(user_agent=config.USER_AGENT)


# # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É
# database.add_product_to_sklad('–Ø–±–ª–æ–∫–∏',
#                                12, 12000,
#                                '–°–æ—Ä—Ç Golden',
#                                'https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.applesfromny.com%2Fwp-content%2Fuploads%2F2020%2F05%2F20Ounce_NYAS-Apples2.png&tbnid=ktcxvF5LaXyVXM&vet=12ahUKEwiF4uu0oZP_AhUJwyoKHUtdC-AQMygBegUIARDDAQ..i&imgrefurl=https%3A%2F%2Fwww.applesfromny.com%2Fvarieties%2F&docid=C0ERe9pIHvHfgM&w=2400&h=1889&q=apples&ved=2ahUKEwiF4uu0oZP_AhUJwyoKHUtdC-AQMygBegUIARDDAQ')

# database.add_product_to_sklad('–ì—Ä—É—à–∏',
#                               13, 13000,
#                               '–°–∞–º—ã–µ –ª—É—á—à–∏–µ',
#                               'https://www.google.com/url?sa=i&url=https%3A%2F%2Frastenievod.com%2Fsorta-grush.html&psig=AOvVaw33NUIEzUs-JK1DyHtzv490&ust=1690623265097000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi1m8uMsYADFQAAAAAdAAAAABAE')
#
# database.add_product_to_sklad('–ü–æ–º–∏–¥–æ—Ä—ã',
#                               7, 7500,
#                               '–ü–æ–º–∏–¥–æ—Ä—ã –†–æ–∑–æ–≤—ã–µ',
#                               'https://www.google.com/url?sa=i&url=https%3A%2F%2Fxn--80adalk6a2b9h.xn--p1ai%2Fproducts%2Fpomidory-rozovye-tashkent-ves&psig=AOvVaw0Q_-XFIiA0urFdMJ4bcXdb&ust=1690623416633000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCPCfnZONsYADFQAAAAAdAAAAABAE')
#
# database.add_product_to_sklad('–û–≥—É—Ä—Ü—ã',
#                               9, 9000,
#                               '–û–≥—É—Ä—Ü—ã –ö—É—Ä–∞–∂',
#                               'https://www.google.com/url?sa=i&url=https%3A%2F%2Fapeti.ru%2Fproduct%2Fogurtsy_kurazh_srednie.html&psig=AOvVaw1_OgXcBc-37nM9sKZgc8Ow&ust=1690623483571000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCMjBwbONsYADFQAAAAAdAAAAABAE')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_message(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏
    user_id = message.from_user.id
    print(user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    checker = database.check_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if checker:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = database.get_pr_name_id()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
        await bot.send_message(user_id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ—Å—Ç–∞–≤–∫–∞-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º üöó', reply_markup=ReplyKeyboardRemove())
        await bot.send_message(user_id,
                               '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üì≤', reply_markup=buttons.main_menu_kb(products))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
    elif not checker:
        await bot.send_message(user_id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞-–±–æ—Ç –æ—Ç Akidd ü§ñ\n\n'
                                        '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –∏–º—è')

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        await states.RegisterUser.waiting_for_name.set()

# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
@dp.message_handler(state=states.RegisterUser.waiting_for_name)
async def get_name(message):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    username = message.text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await bot.send_message(user_id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ø–µ—Ä—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä üì±', reply_markup=buttons.phone_number_kb())
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await dp.current_state(user=user_id).update_data(username=username)
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    await states.RegisterUser.waiting_for_phone_number.set()

# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=states.RegisterUser.waiting_for_phone_number, content_types=['contact'])
async def get_number(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä
    if message.contact:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        phone_number = message.contact.phone_number
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await dp.current_state(user=user_id).get_data()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database.register_user(user_id, user_data['username'], phone_number, 'Not yet')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!', reply_markup=ReplyKeyboardRemove())

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        products = database.get_pr_name_id()
        await bot.send_message(user_id,'–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üì≤', reply_markup=buttons.main_menu_kb(products))

        await dp.current_state(user=user_id).finish()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä
    elif not message.contact:
        await bot.send_message(user_id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É üì≤',reply_markup=buttons.phone_number_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query_handler(lambda call: call.data in ['increment', 'decrement', 'to_cart', 'back'])
async def get_user_product_count(call):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ +
    if call.data == 'increment':
        user_data = await dp.current_state(user=user_id).get_data()
        actual_count = user_data['pr_count']

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await dp.current_state(user=user_id).update_data(pr_count=user_data['pr_count'] + 1)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=buttons.choose_product_count('increment', actual_count))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ -
    elif call.data == 'decrement':
        user_data = await dp.current_state(user=user_id).get_data()
        actual_count = user_data['pr_count']

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await dp.current_state(user=user_id).update_data(pr_count=user_data['pr_count'] - 1)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=buttons.choose_product_count('decrement', actual_count))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–Ω–∞–∑–∞–¥'
    elif call.data == 'back':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é
        products = database.get_pr_name_id()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é
        await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üì≤',
                                    user_id,
                                    call.message.message_id,
                                    reply_markup=buttons.main_menu_kb(products))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'
    elif call.data == 'to_cart':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await dp.current_state(user=user_id).get_data()
        product_count = user_data['pr_count']
        user_product = user_data['pr_name']

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É (–∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        database.add_product_to_cart(user_id, user_product, product_count)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –º–µ–Ω—é
        products = database.get_pr_name_id()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é
        await bot.edit_message_text('–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É üõí\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?)',
                                    user_id,
                                    call.message.message_id,
                                    reply_markup=buttons.main_menu_kb(products))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ö–æ—Ä–∑–∏–Ω–∞)
@dp.callback_query_handler(lambda call: call.data in ['order', 'cart', 'clear_cart'])
async def main_menu_handle(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
    if call.data == 'order':
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ—Ä—Ö–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.delete_message(user_id, message_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é'
        await bot.send_message(user_id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ø–µ—Ä—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç', reply_markup=buttons.location_kb())

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
        await states.AcceptOrder.waiting_for_location.set()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–æ—Ä–∑–∏–Ω–∞'
    elif call.data == 'cart':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = database.get_exact_user_cart(user_id)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        full_text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n'
        total_amount = 0

        for i in user_cart:
            full_text += f'{i[0]} x {i[1]} = {i[2]}\n\n'
            total_amount += i[2]

        # –ò—Ç–æ–≥
        full_text += f'\n–ò—Ç–æ–≥: {total_amount}'

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.edit_message_text(full_text, user_id, message_id, reply_markup=buttons.get_cart_kb())

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'
    elif call.data == 'clear_cart':
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        database.delete_product_from_cart(user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await bot.edit_message_text('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üõí', user_id, message_id, reply_markup=buttons.main_menu_kb(database.get_pr_name_id()))

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=states.AcceptOrder.waiting_for_location, content_types=['location', 'text'])
async def get_location(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–æ–∫–∞—Ü–∏—é
    if message.location:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        latitude = message.location.latitude
        longitude = message.location.longitude
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        try:
            address = geolocator.reverse((latitude, longitude)).address
        except:
            address = '–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ geopy'

        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = database.get_exact_user_cart(user_id)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        full_text = '‚¨á –í–∞—à –∑–∞–∫–∞–∑ ‚¨á\n\n'
        user_info = database.get_user_number_name(user_id)
        full_text += f'üìë –í–∞—à–µ –∏–º—è: {user_info[0]}\n\nüì± –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {user_info[1]}\n\n'
        total_amount = 0

        for i in user_cart:
            full_text += f'{i[0]} x {i[1]} = {i[2]}\n'
            total_amount += i[2]

        # –ò—Ç–æ–≥ –∏ –ê–¥—Ä–µ—Å
        full_text += f'\nüõí –ò—Ç–æ–≥: {total_amount}\n\nüìç –ê–¥—Ä–µ—Å: {address}'

        await bot.send_message(user_id, full_text, reply_markup=buttons.get_accept_kb())

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await dp.current_state(user=user_id).update_data(address=address, full_text=full_text)
        await states.AcceptOrder.waiting_for_accept.set()

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=states.AcceptOrder.waiting_for_accept)
async def get_accept(message):
    user_id = message.from_user.id
    user_answer = message.text
    user_data = await dp.current_state(user=user_id).get_data()
    full_text = user_data.get('full_text')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    products = database.get_pr_name_id()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    if user_answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        admin_id = config.ADMIN_ID
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.delete_product_from_cart(user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await bot.send_message(admin_id, full_text.replace("–í–∞—à", "–ù–æ–≤—ã–π"))
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(user_id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n\n–ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É +–• (–•–•–•) –•–•–•-–•–•-–•–•\n\n'
                                        '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üòä', reply_markup=ReplyKeyboardRemove())

    elif user_answer == '–û—Ç–º–µ–Ω–∏—Ç—å':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(user_id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=ReplyKeyboardRemove())

    # –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
    await dp.current_state(user=user_id).finish()
    await bot.send_message(user_id, '–ú–µ–Ω—é', reply_markup=buttons.main_menu_kb(products))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda call: int(call.data) in database.get_pr_id())
async def get_user_product(call):
    user_id = call.message.chat.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    await dp.current_state(user=user_id).update_data(pr_name=call.data, pr_count=1)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = call.message.message_id

    # –°–º–µ–Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                chat_id=user_id, message_id=message_id,
                                reply_markup=buttons.choose_product_count())

# –ó–∞–ø—É—Å–∫
executor.start_polling(dp)